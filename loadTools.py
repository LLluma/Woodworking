# This file has been automatically generated by the loadToolsAuto.py script. Don't change it here.

import FreeCAD
import FreeCADGui


translate = FreeCAD.Qt.translate


def QT_TRANSLATE_NOOP(context, text):
    return text


import os
import sys

import fakemodule


path = os.path.dirname(fakemodule.__file__)
iconPath = os.path.join(path, "Icons")


# ######################################################################################################################
class getDimensions:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "getDimensions.png"),
            "MenuText": QT_TRANSLATE_NOOP("getDimensionsMenuText", "getDimensions, BOM, cutlist"),
            "ToolTip": QT_TRANSLATE_NOOP("getDimensionsToolTip", "Creates spreadsheet with dimensions to cut."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "getDimensions"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("getDimensions", getDimensions())


# ######################################################################################################################
class sheet2export:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "sheet2export.png"),
            "MenuText": QT_TRANSLATE_NOOP("sheet2exportMenuText", "sheet2export"),
            "ToolTip": QT_TRANSLATE_NOOP("sheet2exportToolTip", "Exports spreadsheet to chosen file format."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "sheet2export"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("sheet2export", sheet2export())


# ######################################################################################################################
class scanObjects:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "scanObjects.png"),
            "MenuText": QT_TRANSLATE_NOOP("scanObjectsMenuText", "scanObjects"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "scanObjectsToolTip",
                "Inspection tool for FreeCAD macro development & project debug (live API).",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "scanObjects"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("scanObjects", scanObjects())


# ######################################################################################################################
class setTextures:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "setTextures.png"),
            "MenuText": QT_TRANSLATE_NOOP("setTexturesMenuText", "setTextures"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "setTexturesToolTip",
                "Store textures information and allows to load textures. Solves problem with texture sharing without huge project file size.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "setTextures"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("setTextures", setTextures())


# ######################################################################################################################
class makeTransparent:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "makeTransparent.png"),
            "MenuText": QT_TRANSLATE_NOOP("makeTransparentMenuText", "transparent or normal mode"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "makeTransparentToolTip",
                "Make all parts transparent, so you can see all the joints, pilot holes, screws, countersinks. If you click next one all parts will back to normal. The transparent default is 83, so do not set any part to this number if you want e.g. to keep glass part of the furniture transparent after this preview.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "makeTransparent"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("makeTransparent", makeTransparent())


# ######################################################################################################################
class colorManager:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "colorManager.png"),
            "MenuText": QT_TRANSLATE_NOOP("colorManagerMenuText", "colorManager"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "colorManagerToolTip",
                "Allows to set face colors for all objects from spreadsheet. Also you can browse colors for manually selected face, object or many faces or objects and see the effect at 3D model in real-time.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "colorManager"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("colorManager", colorManager())


# ######################################################################################################################
class showSpaceModel:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "showSpaceModel.png"),
            "MenuText": QT_TRANSLATE_NOOP("showSpaceModelMenuText", "show, model, space"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "showSpaceModelToolTip",
                "This tool allows you to calculate the overall occupied space in 3D by the model.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "showSpaceModel"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("showSpaceModel", showSpaceModel())


# ######################################################################################################################
class showSpaceSelected:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "showSpaceSelected.png"),
            "MenuText": QT_TRANSLATE_NOOP("showSpaceSelectedMenuText", "show, selected, space"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "showSpaceSelectedToolTip",
                "This tool allows you to calculate the overall occupied space in 3D by the selected parts.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "showSpaceSelected"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("showSpaceSelected", showSpaceSelected())


# ######################################################################################################################
class magicMove:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicMove.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicMoveMenuText", "magicMove"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicMoveToolTip",
                "If you have problem with unexpected result of panel movements via dedicated icons, you can use this tool to precisely move panel into desired direction. This tool allow to turn off and on axis cross and resize corner cross size.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicMove"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicMove", magicMove())


# ######################################################################################################################
class magicManager:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicManager.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicManagerMenuText", "magicManager"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicManagerToolTip",
                "If you have problem with unexpected result of Magic Panels, you can use this tool to preview panel before creation. It may take more time to create panel, but you can select exact panel to apply, also the edge and vertex position. This tool allows to create panel at selected face or between two faces.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicManager"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicManager", magicManager())


# ######################################################################################################################
class magicDowels:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicDowels.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicDowelsMenuText", "magicDowels"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicDowelsToolTip",
                "Allows to add mounting points to the furniture. For example you can easily add screws, dowels, shelf supporter pins or custom mounting points.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicDowels"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicDowels", magicDowels())


# ######################################################################################################################
class magicDriller:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicDriller.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicDrillerMenuText", "magicDriller"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicDrillerToolTip",
                "Allows to drill holes, countersinks or counterbores in a series with predefined or custom sequences.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicDriller"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicDriller", magicDriller())


# ######################################################################################################################
class magicCNC:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicCNC.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicCNCMenuText", "magicCNC, drill bit move machine"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicCNCToolTip",
                "This tool allows to move drill bit at the selected face and drill holes.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicCNC"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicCNC", magicCNC())


# ######################################################################################################################
class magicFixture:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicFixture.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicFixtureMenuText", "magicFixture"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicFixtureToolTip",
                "Allows to add any type of detailed fixture to the furniture. You can create Link to the realistic looking part or Clone it.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicFixture"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicFixture", magicFixture())


# ######################################################################################################################
class magicJoints:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicJoints.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicJointsMenuText", "magicJoints"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicJointsToolTip",
                "Allows to move, copy joint Sketch pattern and create Mortise and Tenon.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicJoints"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicJoints", magicJoints())


# ######################################################################################################################
class magicAngle:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicAngle.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicAngleMenuText", "magicAngle"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicAngleToolTip",
                "Allows to rotate panels and even other more complicated objects, like construction profiles.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicAngle"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicAngle", magicAngle())


# ######################################################################################################################
class debugInfo:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "debugInfo.png"),
            "MenuText": QT_TRANSLATE_NOOP("debugInfoMenuText", "debugInfo"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "debugInfoToolTip",
                "Copy platform details to clipboard for bug report purposes.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "debugInfo"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")

        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("debugInfo", debugInfo())


# ######################################################################################################################
class selected2Group:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "selected2Group.png"),
            "MenuText": QT_TRANSLATE_NOOP("selected2GroupMenuText", "selected to Group"),
            "ToolTip": QT_TRANSLATE_NOOP("selected2GroupToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "selected2Group"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("selected2Group", selected2Group())


# ######################################################################################################################
class selected2LinkGroup:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "selected2LinkGroup.png"),
            "MenuText": QT_TRANSLATE_NOOP("selected2LinkGroupMenuText", "selected to LinkGroup"),
            "ToolTip": QT_TRANSLATE_NOOP("selected2LinkGroupToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "selected2LinkGroup"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("selected2LinkGroup", selected2LinkGroup())


# ######################################################################################################################
class selected2Link:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "selected2Link.png"),
            "MenuText": QT_TRANSLATE_NOOP("selected2LinkMenuText", "selected to Link"),
            "ToolTip": QT_TRANSLATE_NOOP("selected2LinkToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "selected2Link"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("selected2Link", selected2Link())


# ######################################################################################################################
class selected2Outside:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "selected2Outside.png"),
            "MenuText": QT_TRANSLATE_NOOP("selected2OutsideMenuText", "move outside the container"),
            "ToolTip": QT_TRANSLATE_NOOP("selected2OutsideToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "selected2Outside"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("selected2Outside", selected2Outside())


# ######################################################################################################################
class drillHoles:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "drillHoles.png"),
            "MenuText": QT_TRANSLATE_NOOP("drillHolesMenuText", "drill bit, drill simple holes"),
            "ToolTip": QT_TRANSLATE_NOOP("drillHolesToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "drillHoles"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("drillHoles", drillHoles())


# ######################################################################################################################
class drillCountersinks:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "drillCountersinks.png"),
            "MenuText": QT_TRANSLATE_NOOP("drillCountersinksMenuText", "drill bit, drill countersinks"),
            "ToolTip": QT_TRANSLATE_NOOP("drillCountersinksToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "drillCountersinks"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("drillCountersinks", drillCountersinks())


# ######################################################################################################################
class drillCounterbores:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "drillCounterbores.png"),
            "MenuText": QT_TRANSLATE_NOOP("drillCounterboresMenuText", "drill bit, drill counterbores"),
            "ToolTip": QT_TRANSLATE_NOOP("drillCounterboresToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "drillCounterbores"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("drillCounterbores", drillCounterbores())


# ######################################################################################################################
class drillCounterbores2x:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "drillCounterbores2x.png"),
            "MenuText": QT_TRANSLATE_NOOP(
                "drillCounterbores2xMenuText",
                "drill bit, drill counterbores from both sides",
            ),
            "ToolTip": QT_TRANSLATE_NOOP("drillCounterbores2xToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "drillCounterbores2x"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("drillCounterbores2x", drillCounterbores2x())


# ######################################################################################################################
class edge2drillbit:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "edge2drillbit.png"),
            "MenuText": QT_TRANSLATE_NOOP("edge2drillbitMenuText", "drill bit from edge hole"),
            "ToolTip": QT_TRANSLATE_NOOP("edge2drillbitToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "edge2drillbit"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("edge2drillbit", edge2drillbit())


# ######################################################################################################################
class cutDowels:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "cutDowels.png"),
            "MenuText": QT_TRANSLATE_NOOP("cutDowelsMenuText", "cut dowels from panel"),
            "ToolTip": QT_TRANSLATE_NOOP("cutDowelsToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "cutDowels"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("cutDowels", cutDowels())


# ######################################################################################################################
class panel2link:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panel2link.png"),
            "MenuText": QT_TRANSLATE_NOOP("panel2linkMenuText", "replace with links"),
            "ToolTip": QT_TRANSLATE_NOOP("panel2linkToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panel2link"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panel2link", panel2link())


# ######################################################################################################################
class panel2clone:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panel2clone.png"),
            "MenuText": QT_TRANSLATE_NOOP("panel2cloneMenuText", "replace with clones"),
            "ToolTip": QT_TRANSLATE_NOOP("panel2cloneToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panel2clone"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panel2clone", panel2clone())


# ######################################################################################################################
class sketch2dowel:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "sketch2dowel.png"),
            "MenuText": QT_TRANSLATE_NOOP("sketch2dowelMenuText", "dowel from sketch hole and face"),
            "ToolTip": QT_TRANSLATE_NOOP("sketch2dowelToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "sketch2dowel"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("sketch2dowel", sketch2dowel())


# ######################################################################################################################
class edge2dowel:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "edge2dowel.png"),
            "MenuText": QT_TRANSLATE_NOOP("edge2dowelMenuText", "dowel from edge hole"),
            "ToolTip": QT_TRANSLATE_NOOP("edge2dowelToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "edge2dowel"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("edge2dowel", edge2dowel())


# ######################################################################################################################
class magicCut:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicCut.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicCutMenuText", "single panel cut by many knives with copies"),
            "ToolTip": QT_TRANSLATE_NOOP("magicCutToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicCut"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicCut", magicCut())


# ######################################################################################################################
class magicCutLinks:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicCutLinks.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicCutLinksMenuText", "single panel cut by many knives with links"),
            "ToolTip": QT_TRANSLATE_NOOP("magicCutLinksToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicCutLinks"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicCutLinks", magicCutLinks())


# ######################################################################################################################
class magicKnife:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicKnife.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicKnifeMenuText", "single knife cut many panels with copies"),
            "ToolTip": QT_TRANSLATE_NOOP("magicKnifeToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicKnife"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicKnife", magicKnife())


# ######################################################################################################################
class magicKnifeLinks:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicKnifeLinks.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicKnifeLinksMenuText", "single knife cut many panels with links"),
            "ToolTip": QT_TRANSLATE_NOOP("magicKnifeLinksToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicKnifeLinks"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicKnifeLinks", magicKnifeLinks())


# ######################################################################################################################
class jointTenon:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "jointTenon.png"),
            "MenuText": QT_TRANSLATE_NOOP("jointTenonMenuText", "joint, Tenon"),
            "ToolTip": QT_TRANSLATE_NOOP("jointTenonToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "jointTenon"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("jointTenon", jointTenon())


# ######################################################################################################################
class jointCustom:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "jointCustom.png"),
            "MenuText": QT_TRANSLATE_NOOP("jointCustomMenuText", "joint, Custom"),
            "ToolTip": QT_TRANSLATE_NOOP("jointCustomToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "jointCustom"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("jointCustom", jointCustom())


# ######################################################################################################################
class panel2frame:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panel2frame.png"),
            "MenuText": QT_TRANSLATE_NOOP("panel2frameMenuText", "cubes to frames"),
            "ToolTip": QT_TRANSLATE_NOOP("panel2frameToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panel2frame"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panel2frame", panel2frame())


# ######################################################################################################################
class cutTenons:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "cutTenons.png"),
            "MenuText": QT_TRANSLATE_NOOP("cutTenonsMenuText", "cut all tenons from panel"),
            "ToolTip": QT_TRANSLATE_NOOP("cutTenonsToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "cutTenons"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("cutTenons", cutTenons())


# ######################################################################################################################
class grainH:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "grainH.png"),
            "MenuText": QT_TRANSLATE_NOOP("grainHMenuText", "grain direction marker, horizontal"),
            "ToolTip": QT_TRANSLATE_NOOP("grainHToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "grainH"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("grainH", grainH())


# ######################################################################################################################
class grainV:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "grainV.png"),
            "MenuText": QT_TRANSLATE_NOOP("grainVMenuText", "grain direction marker, vertical"),
            "ToolTip": QT_TRANSLATE_NOOP("grainVToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "grainV"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("grainV", grainV())


# ######################################################################################################################
class grainX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "grainX.png"),
            "MenuText": QT_TRANSLATE_NOOP("grainXMenuText", "grain direction marker, no grain"),
            "ToolTip": QT_TRANSLATE_NOOP("grainXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "grainX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("grainX", grainX())


# ######################################################################################################################
class magicCorner:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicCorner.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicCornerMenuText", "create corner connection"),
            "ToolTip": QT_TRANSLATE_NOOP("magicCornerToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicCorner"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicCorner", magicCorner())


# ######################################################################################################################
class showAlias:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "showAlias.png"),
            "MenuText": QT_TRANSLATE_NOOP("showAliasMenuText", "select objects with alias"),
            "ToolTip": QT_TRANSLATE_NOOP("showAliasToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "showAlias"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("showAlias", showAlias())


# ######################################################################################################################
class magicMeasure:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicMeasure.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicMeasureMenuText", "magicMeasure"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicMeasureToolTip",
                "Quick measurement preview on hover or by selection.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicMeasure"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicMeasure", magicMeasure())


# ######################################################################################################################
class fitModel:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "fitModel.png"),
            "MenuText": QT_TRANSLATE_NOOP("fitModelMenuText", "fitModel"),
            "ToolTip": QT_TRANSLATE_NOOP("fitModelToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "fitModel"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("fitModel", fitModel())


# ######################################################################################################################
class showVertex:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "showVertex.png"),
            "MenuText": QT_TRANSLATE_NOOP("showVertexMenuText", "showVertex"),
            "ToolTip": QT_TRANSLATE_NOOP("showVertexToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "showVertex"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("showVertex", showVertex())


# ######################################################################################################################
class selectVertex:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "selectVertex.png"),
            "MenuText": QT_TRANSLATE_NOOP("selectVertexMenuText", "selectVertex"),
            "ToolTip": QT_TRANSLATE_NOOP("selectVertexToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "selectVertex"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("selectVertex", selectVertex())


# ######################################################################################################################
class roundCurve:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "roundCurve.png"),
            "MenuText": QT_TRANSLATE_NOOP("roundCurveMenuText", "render curve precisely"),
            "ToolTip": QT_TRANSLATE_NOOP("roundCurveToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "roundCurve"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("roundCurve", roundCurve())


# ######################################################################################################################
class panelDefaultXY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelDefaultXY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelDefaultXYMenuText", "panel, XY, 600x300, 18 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("panelDefaultXYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelDefaultXY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelDefaultXY", panelDefaultXY())


# ######################################################################################################################
class panelDefaultYX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelDefaultYX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelDefaultYXMenuText", "panel, YX, 300x600, 18 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("panelDefaultYXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelDefaultYX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelDefaultYX", panelDefaultYX())


# ######################################################################################################################
class panelDefaultXZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelDefaultXZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelDefaultXZMenuText", "panel, XZ, 600x300, 18 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("panelDefaultXZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelDefaultXZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelDefaultXZ", panelDefaultXZ())


# ######################################################################################################################
class panelDefaultZX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelDefaultZX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelDefaultZXMenuText", "panel, ZX, 300x600, 18 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("panelDefaultZXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelDefaultZX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelDefaultZX", panelDefaultZX())


# ######################################################################################################################
class panelDefaultYZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelDefaultYZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelDefaultYZMenuText", "panel, YZ, 600x300, 18 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("panelDefaultYZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelDefaultYZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelDefaultYZ", panelDefaultYZ())


# ######################################################################################################################
class panelDefaultZY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelDefaultZY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelDefaultZYMenuText", "panel, ZY, 300x600, 18 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("panelDefaultZYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelDefaultZY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelDefaultZY", panelDefaultZY())


# ######################################################################################################################
class panelCopyXY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelCopyXY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelCopyXYMenuText", "copy panel, XY"),
            "ToolTip": QT_TRANSLATE_NOOP("panelCopyXYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelCopyXY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelCopyXY", panelCopyXY())


# ######################################################################################################################
class panelCopyYX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelCopyYX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelCopyYXMenuText", "copy panel, YX"),
            "ToolTip": QT_TRANSLATE_NOOP("panelCopyYXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelCopyYX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelCopyYX", panelCopyYX())


# ######################################################################################################################
class panelCopyXZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelCopyXZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelCopyXZMenuText", "copy panel, XZ"),
            "ToolTip": QT_TRANSLATE_NOOP("panelCopyXZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelCopyXZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelCopyXZ", panelCopyXZ())


# ######################################################################################################################
class panelCopyZX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelCopyZX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelCopyZXMenuText", "copy panel, ZX"),
            "ToolTip": QT_TRANSLATE_NOOP("panelCopyZXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelCopyZX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelCopyZX", panelCopyZX())


# ######################################################################################################################
class panelCopyYZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelCopyYZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelCopyYZMenuText", "copy panel, YZ"),
            "ToolTip": QT_TRANSLATE_NOOP("panelCopyYZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelCopyYZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelCopyYZ", panelCopyYZ())


# ######################################################################################################################
class panelCopyZY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelCopyZY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelCopyZYMenuText", "copy panel, ZY"),
            "ToolTip": QT_TRANSLATE_NOOP("panelCopyZYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelCopyZY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelCopyZY", panelCopyZY())


# ######################################################################################################################
class panelMoveXp:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMoveXp.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMoveXpMenuText", "panel, move, back"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMoveXpToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMoveXp"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMoveXp", panelMoveXp())


# ######################################################################################################################
class panelMoveXm:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMoveXm.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMoveXmMenuText", "panel, move, forward"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMoveXmToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMoveXm"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMoveXm", panelMoveXm())


# ######################################################################################################################
class panelMoveYp:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMoveYp.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMoveYpMenuText", "panel, move, right"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMoveYpToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMoveYp"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMoveYp", panelMoveYp())


# ######################################################################################################################
class panelMoveYm:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMoveYm.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMoveYmMenuText", "panel, move, left"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMoveYmToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMoveYm"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMoveYm", panelMoveYm())


# ######################################################################################################################
class panelMoveZp:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMoveZp.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMoveZpMenuText", "panel, move, up"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMoveZpToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMoveZp"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMoveZp", panelMoveZp())


# ######################################################################################################################
class panelMoveZm:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMoveZm.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMoveZmMenuText", "panel, move, down"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMoveZmToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMoveZm"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMoveZm", panelMoveZm())


# ######################################################################################################################
class panelMove2Face:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMove2Face.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMove2FaceMenuText", "panel, move, to face"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMove2FaceToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMove2Face"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMove2Face", panelMove2Face())


# ######################################################################################################################
class panelMove2Center:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMove2Center.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMove2CenterMenuText", "panel, move, to center"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMove2CenterToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMove2Center"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMove2Center", panelMove2Center())


# ######################################################################################################################
class panelMove2Anchor:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelMove2Anchor.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelMove2AnchorMenuText", "panel, move, to anchor"),
            "ToolTip": QT_TRANSLATE_NOOP("panelMove2AnchorToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelMove2Anchor"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelMove2Anchor", panelMove2Anchor())


# ######################################################################################################################
class align2Curve:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "align2Curve.png"),
            "MenuText": QT_TRANSLATE_NOOP("align2CurveMenuText", "align panel to curve"),
            "ToolTip": QT_TRANSLATE_NOOP("align2CurveToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "align2Curve"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("align2Curve", align2Curve())


# ######################################################################################################################
class mapPosition:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "mapPosition.png"),
            "MenuText": QT_TRANSLATE_NOOP("mapPositionMenuText", "move to 1st selected"),
            "ToolTip": QT_TRANSLATE_NOOP("mapPositionToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "mapPosition"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("mapPosition", mapPosition())


# ######################################################################################################################
class magicResizer:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "magicResizer.png"),
            "MenuText": QT_TRANSLATE_NOOP("magicResizerMenuText", "magicResizer, smart resizer tool"),
            "ToolTip": QT_TRANSLATE_NOOP(
                "magicResizerToolTip",
                "This tool allows to resize object via selected edge or to the nearest face of other object.",
            ),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "magicResizer"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("magicResizer", magicResizer())


# ######################################################################################################################
class showConstraints:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "showConstraints.png"),
            "MenuText": QT_TRANSLATE_NOOP("showConstraintsMenuText", "select edges equal to constraints"),
            "ToolTip": QT_TRANSLATE_NOOP("showConstraintsToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "showConstraints"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("showConstraints", showConstraints())


# ######################################################################################################################
class panelResize1:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelResize1.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelResize1MenuText", "panel, bigger, long+"),
            "ToolTip": QT_TRANSLATE_NOOP("panelResize1ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelResize1"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelResize1", panelResize1())


# ######################################################################################################################
class panelResize2:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelResize2.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelResize2MenuText", "panel, smaller, long-"),
            "ToolTip": QT_TRANSLATE_NOOP("panelResize2ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelResize2"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelResize2", panelResize2())


# ######################################################################################################################
class panelResize3:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelResize3.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelResize3MenuText", "panel, bigger, short+"),
            "ToolTip": QT_TRANSLATE_NOOP("panelResize3ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelResize3"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelResize3", panelResize3())


# ######################################################################################################################
class panelResize4:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelResize4.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelResize4MenuText", "panel, smaller, short-"),
            "ToolTip": QT_TRANSLATE_NOOP("panelResize4ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelResize4"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelResize4", panelResize4())


# ######################################################################################################################
class panelResize5:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelResize5.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelResize5MenuText", "panel, bigger, thickness+"),
            "ToolTip": QT_TRANSLATE_NOOP("panelResize5ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelResize5"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelResize5", panelResize5())


# ######################################################################################################################
class panelResize6:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelResize6.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelResize6MenuText", "panel, smaller, thickness-"),
            "ToolTip": QT_TRANSLATE_NOOP("panelResize6ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelResize6"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelResize6", panelResize6())


# ######################################################################################################################
class panelSideLeft:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelSideLeft.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelSideLeftMenuText", "panel, side, left"),
            "ToolTip": QT_TRANSLATE_NOOP("panelSideLeftToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelSideLeft"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelSideLeft", panelSideLeft())


# ######################################################################################################################
class panelSideLeftUP:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelSideLeftUP.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelSideLeftUPMenuText", "panel, side, left, up"),
            "ToolTip": QT_TRANSLATE_NOOP("panelSideLeftUPToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelSideLeftUP"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelSideLeftUP", panelSideLeftUP())


# ######################################################################################################################
class panelSideRight:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelSideRight.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelSideRightMenuText", "panel, side, right"),
            "ToolTip": QT_TRANSLATE_NOOP("panelSideRightToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelSideRight"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelSideRight", panelSideRight())


# ######################################################################################################################
class panelSideRightUP:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelSideRightUP.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelSideRightUPMenuText", "panel, side, right, up"),
            "ToolTip": QT_TRANSLATE_NOOP("panelSideRightUPToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelSideRightUP"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelSideRightUP", panelSideRightUP())


# ######################################################################################################################
class panelBackOut:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelBackOut.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelBackOutMenuText", "panel, back, out"),
            "ToolTip": QT_TRANSLATE_NOOP("panelBackOutToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelBackOut"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelBackOut", panelBackOut())


# ######################################################################################################################
class panelCoverXY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelCoverXY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelCoverXYMenuText", "panel, top, cover"),
            "ToolTip": QT_TRANSLATE_NOOP("panelCoverXYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelCoverXY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelCoverXY", panelCoverXY())


# ######################################################################################################################
class routerCove:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerCove.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerCoveMenuText", "edge to cove, thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerCoveToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerCove"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerCove", routerCove())


# ######################################################################################################################
class routerCove2:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerCove2.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerCove2MenuText", "edge to cove, 1/2 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerCove2ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerCove2"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerCove2", routerCove2())


# ######################################################################################################################
class routerCove4:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerCove4.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerCove4MenuText", "edge to cove, 1/4 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerCove4ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerCove4"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerCove4", routerCove4())


# ######################################################################################################################
class routerRoundOver:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerRoundOver.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerRoundOverMenuText", "edge to round over, thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerRoundOverToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerRoundOver"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerRoundOver", routerRoundOver())


# ######################################################################################################################
class routerRoundOver2:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerRoundOver2.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerRoundOver2MenuText", "edge to round over, 1/2 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerRoundOver2ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerRoundOver2"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerRoundOver2", routerRoundOver2())


# ######################################################################################################################
class routerRoundOver4:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerRoundOver4.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerRoundOver4MenuText", "edge to round over, 1/4 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerRoundOver4ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerRoundOver4"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerRoundOver4", routerRoundOver4())


# ######################################################################################################################
class routerStraight2:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerStraight2.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerStraight2MenuText", "edge to straight, 1/2 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerStraight2ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerStraight2"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerStraight2", routerStraight2())


# ######################################################################################################################
class routerStraight3:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerStraight3.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerStraight3MenuText", "edge to straight, 1/3 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerStraight3ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerStraight3"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerStraight3", routerStraight3())


# ######################################################################################################################
class routerStraight4:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerStraight4.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerStraight4MenuText", "edge to straight, 1/4 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerStraight4ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerStraight4"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerStraight4", routerStraight4())


# ######################################################################################################################
class routerChamfer:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerChamfer.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerChamferMenuText", "edge to chamfer, thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerChamferToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerChamfer"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerChamfer", routerChamfer())


# ######################################################################################################################
class routerChamfer2:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerChamfer2.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerChamfer2MenuText", "edge to chamfer, 1/2 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerChamfer2ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerChamfer2"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerChamfer2", routerChamfer2())


# ######################################################################################################################
class routerChamfer4:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "routerChamfer4.png"),
            "MenuText": QT_TRANSLATE_NOOP("routerChamfer4MenuText", "edge to chamfer, 1/4 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("routerChamfer4ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "routerChamfer4"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("routerChamfer4", routerChamfer4())


# ######################################################################################################################
class multiPocket:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "multiPocket.png"),
            "MenuText": QT_TRANSLATE_NOOP("multiPocketMenuText", "multi Sketch to Pocket, thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("multiPocketToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "multiPocket"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("multiPocket", multiPocket())


# ######################################################################################################################
class multiPocket2:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "multiPocket2.png"),
            "MenuText": QT_TRANSLATE_NOOP("multiPocket2MenuText", "multi Sketch to Pocket, 1/2 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("multiPocket2ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "multiPocket2"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("multiPocket2", multiPocket2())


# ######################################################################################################################
class multiPocket4:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "multiPocket4.png"),
            "MenuText": QT_TRANSLATE_NOOP("multiPocket4MenuText", "multi Sketch to Pocket, 1/4 thickness"),
            "ToolTip": QT_TRANSLATE_NOOP("multiPocket4ToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "multiPocket4"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("multiPocket4", multiPocket4())


# ######################################################################################################################
class panel2pad:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panel2pad.png"),
            "MenuText": QT_TRANSLATE_NOOP("panel2padMenuText", "cube to pad"),
            "ToolTip": QT_TRANSLATE_NOOP("panel2padToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panel2pad"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panel2pad", panel2pad())


# ######################################################################################################################
class sketch2clone:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "sketch2clone.png"),
            "MenuText": QT_TRANSLATE_NOOP("sketch2cloneMenuText", "convert sketches to clones"),
            "ToolTip": QT_TRANSLATE_NOOP("sketch2cloneToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "sketch2clone"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("sketch2clone", sketch2clone())


# ######################################################################################################################
class panel2profile:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panel2profile.png"),
            "MenuText": QT_TRANSLATE_NOOP("panel2profileMenuText", "construction profile"),
            "ToolTip": QT_TRANSLATE_NOOP("panel2profileToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panel2profile"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panel2profile", panel2profile())


# ######################################################################################################################
class panel2angle:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panel2angle.png"),
            "MenuText": QT_TRANSLATE_NOOP("panel2angleMenuText", "construction angle"),
            "ToolTip": QT_TRANSLATE_NOOP("panel2angleToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panel2angle"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panel2angle", panel2angle())


# ######################################################################################################################
class panel2angle45cut:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panel2angle45cut.png"),
            "MenuText": QT_TRANSLATE_NOOP("panel2angle45cutMenuText", "construction angle 45 cut"),
            "ToolTip": QT_TRANSLATE_NOOP("panel2angle45cutToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panel2angle45cut"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panel2angle45cut", panel2angle45cut())


# ######################################################################################################################
class cornerBlock:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "cornerBlock.png"),
            "MenuText": QT_TRANSLATE_NOOP("cornerBlockMenuText", "table corner block"),
            "ToolTip": QT_TRANSLATE_NOOP("cornerBlockToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "cornerBlock"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("cornerBlock", cornerBlock())


# ######################################################################################################################
class cornerBrace:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "cornerBrace.png"),
            "MenuText": QT_TRANSLATE_NOOP("cornerBraceMenuText", "table corner brace"),
            "ToolTip": QT_TRANSLATE_NOOP("cornerBraceToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "cornerBrace"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("cornerBrace", cornerBrace())


# ######################################################################################################################
class panelFaceXY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelFaceXY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelFaceXYMenuText", "copy panel, face, XY"),
            "ToolTip": QT_TRANSLATE_NOOP("panelFaceXYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelFaceXY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelFaceXY", panelFaceXY())


# ######################################################################################################################
class panelFaceYX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelFaceYX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelFaceYXMenuText", "copy panel, face, YX"),
            "ToolTip": QT_TRANSLATE_NOOP("panelFaceYXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelFaceYX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelFaceYX", panelFaceYX())


# ######################################################################################################################
class panelFaceXZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelFaceXZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelFaceXZMenuText", "copy panel, face, XZ"),
            "ToolTip": QT_TRANSLATE_NOOP("panelFaceXZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelFaceXZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelFaceXZ", panelFaceXZ())


# ######################################################################################################################
class panelFaceZX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelFaceZX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelFaceZXMenuText", "copy panel, face, ZX"),
            "ToolTip": QT_TRANSLATE_NOOP("panelFaceZXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelFaceZX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelFaceZX", panelFaceZX())


# ######################################################################################################################
class panelFaceYZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelFaceYZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelFaceYZMenuText", "copy panel, face, YZ"),
            "ToolTip": QT_TRANSLATE_NOOP("panelFaceYZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelFaceYZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelFaceYZ", panelFaceYZ())


# ######################################################################################################################
class panelFaceZY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelFaceZY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelFaceZYMenuText", "copy panel, face, ZY"),
            "ToolTip": QT_TRANSLATE_NOOP("panelFaceZYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelFaceZY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelFaceZY", panelFaceZY())


# ######################################################################################################################
class panelBetweenXY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelBetweenXY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelBetweenXYMenuText", "panel, between, XY"),
            "ToolTip": QT_TRANSLATE_NOOP("panelBetweenXYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelBetweenXY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelBetweenXY", panelBetweenXY())


# ######################################################################################################################
class panelBetweenYX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelBetweenYX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelBetweenYXMenuText", "panel, between, YX"),
            "ToolTip": QT_TRANSLATE_NOOP("panelBetweenYXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelBetweenYX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelBetweenYX", panelBetweenYX())


# ######################################################################################################################
class panelBetweenXZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelBetweenXZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelBetweenXZMenuText", "panel, between, XZ"),
            "ToolTip": QT_TRANSLATE_NOOP("panelBetweenXZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelBetweenXZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelBetweenXZ", panelBetweenXZ())


# ######################################################################################################################
class panelBetweenZX:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelBetweenZX.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelBetweenZXMenuText", "panel, between, ZX"),
            "ToolTip": QT_TRANSLATE_NOOP("panelBetweenZXToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelBetweenZX"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelBetweenZX", panelBetweenZX())


# ######################################################################################################################
class panelBetweenYZ:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelBetweenYZ.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelBetweenYZMenuText", "panel, between, YZ"),
            "ToolTip": QT_TRANSLATE_NOOP("panelBetweenYZToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelBetweenYZ"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelBetweenYZ", panelBetweenYZ())


# ######################################################################################################################
class panelBetweenZY:
    def GetResources(self):
        return {
            "Pixmap": os.path.join(iconPath, "panelBetweenZY.png"),
            "MenuText": QT_TRANSLATE_NOOP("panelBetweenZYMenuText", "panel, between, ZY"),
            "ToolTip": QT_TRANSLATE_NOOP("panelBetweenZYToolTip", "Click to see info."),
            "Accel": "",
        }

    def Activated(self):
        import os
        import sys

        import fakemodule

        modulePath = sys.path

        module = "panelBetweenZY"

        path = os.path.dirname(fakemodule.__file__)
        path = os.path.join(path, "Tools")
        path = os.path.join(path, "MagicPanels")
        sys.path.append(path)

        if module in sys.modules:
            del sys.modules[module]

        __import__(module, globals(), locals(), [], 0)

        sys.path = modulePath

        return

    def IsActive(self):
        # not needed now, maybe in the future
        return True


FreeCADGui.addCommand("panelBetweenZY", panelBetweenZY())
